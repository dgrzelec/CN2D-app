import json
settings_json_system = json.dumps([
        { "type": "title",
          "title": "Cranl-Nicolson method in 2D - time-dependent Schrodinger eq. simulation for wave pocket." },
        { "type": "numeric",
          "title": "Delta t",
          "desc": "time step in simulation",
          "section": "System",
          "key": "dt" },

        { "type": "numeric",
          "title": "Delta x",
          "desc": "spacial discretization both for x and y axis",
          "section": "System",
          "key": "dx" },

        { "type": "numeric",
          "title": "Lengh:",
          "desc": "lengh of the system",
          "section": "System",
          "key": "L" },

        { "type": "numeric",
          "title": "Width",
          "desc": "Width (or vertical heigh) of the system",
          "section": "System",
          "key": "W" },
        { "type": "bool",
          "title": "Energy",
          "desc": "Do You want to calculate energy after calculations are done, or new file is loaded",
          "section": "System",
          "key": "calc_ene" }
        ])

settings_json_wavepocket = json.dumps([
        { "type": "title",
          "title": "Wave pocket settings" },
        { "type": "numeric",
          "title": "wave vector k",
          "desc": "energy measure of the wave pocket",
          "section": "WavePocket",
          "key": "k" },

        { "type": "numeric",
          "title": "Sigma_x",
          "desc": "Gauss function parameter",
          "section": "WavePocket",
          "key": "sigma_x" },

        { "type": "numeric",
          "title": "Sigma_y",
          "desc": "Gauss function parameter",
          "section": "WavePocket",
          "key": "sigma_y" },

        { "type": "numeric",
          "title": "Center in x dimension",
          "desc": "Gauss function parameter",
          "section": "WavePocket",
          "key": "center_x" },
        {"type": "numeric",
         "title": "Center in y dimension",
         "desc": "Gauss function parameter",
         "section": "WavePocket",
         "key": "center_y"},
        {"type": "bool",
         "title": "Transverse eigenstates",
         "desc": "Whether to use infinite quantum well eigenstates in transverse direction",
         "section": "WavePocket",
         "key": "transverse"},
        {"type": "numeric",
         "title": "n number",
         "desc": "Eigenstate n number",
         "section": "WavePocket",
         "key": "n"},
        {"type": "numeric",
         "title": "Canal width",
         "desc": "Width of a canal that electron passes through. (corresponds to \"canal\" and \"two_terminal_ring\" potential)",
         "section": "WavePocket",
         "key": "canal_width"},
])

settings_json_animation = json.dumps([
        { "type": "title",
          "title": "Animation settings" },
        { "type": "numeric",
          "title": "Animation frequency",
          "desc": "how many ticks per second is displayed",
          "section": "Animation",
          "key": "freq" },

        { "type": "numeric",
          "title": "Ticks",
          "desc": "Number of time steps calculated",
          "section": "Animation",
          "key": "max_ticks" },
        {"type": "numeric",
         "title": "Graph size",
         "desc": "Graph height in pixels",
         "section": "Animation",
         "key": "graph_size"},

])

settings_json_potential = json.dumps([
        { "type": "title",
          "title": "Potential settings" },
        { "type": "numeric",
          "title": "Potential value",
          "desc": "its multiplied by f constant",
          "section": "Potential",
          "key": "v_value" },

        { "type": "options",
          "title": "Shape",
          "desc": "What kind of potential shape will the device have",
          "section": "Potential",
          "key": "shape",
          "options": ["single_barrier", "double_barrier","single_slit","double_slit_wide", "double_slit_narrow","obstacle","double_slit_close","corner", "two_terminal_ring" ,"two_terminal_ring_smooth", "canal", "Empty"]},
        { "type": "bool",
          "title": "Imaginary Potential",
          "desc": "Imaginary potential that will absorbe wave function",
          "section": "Potential",
          "key": "imaginary" },
        { "type": "numeric",
          "title": "c",
          "desc": "coefficient c",
          "section": "Potential",
          "key": "c" },
        { "type": "numeric",
          "title": "Accuracy parameter",
          "desc": "delta",
          "section": "Potential",
          "key": "delta" },
        { "type": "numeric",
          "title": "x1",
          "desc": "left end of imaginary potential",
          "section": "Potential",
          "key": "x1" },
        { "type": "numeric",
          "title": "x2",
          "desc": "right end of imaginary potential",
          "section": "Potential",
          "key": "x2" },
])

settings_json_magfield = json.dumps([
        { "type": "title",
          "title": "Magnetic field settings" },
        { "type": "bool",
          "title": "Field ON/OFF",
          "desc": "Enables perpendicular magnetic field in the system ",
          "section": "MagneticField",
          "key": "state" },

        { "type": "numeric",
          "title": "Field strength",
          "desc": "How much magnetic flux quantum passes through discretization constant",
          "section": "MagneticField",
          "key": "phi",
        }

])